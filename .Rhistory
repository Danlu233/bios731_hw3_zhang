for (i in 1:nsim) {
set.seed(seed[i])
####################
# simulate data
simdata = get_simdata(n = current_params$n,
beta_treat = current_params$beta_true,
error_distribution = current_params$error_distribution)
####################
# apply method(s)
tic()
fit = fit_lm(simdata)
time_lm = toc()
## apply nonparametric bootstrap
tic()
boot_df = map_dfr(1:nboot, do_bootstrap, simulated_data = simdata)
time_boot_percentile = toc()
####################
# calculate estimates
estimates_lm = get_estimates(model_fit = fit,
true_beta = current_params$beta_true)
estimates_boot_percentile = get_bootstrap_coverage(boot_df, beta_hat = estimates_lm$beta_hat,
true_beta = current_params$beta_true, method = "percentile")
time = c(time_lm$toc - time_lm$tic, time_boot_percentile$toc - time_boot_percentile$tic,
time_boot_t$toc - time_boot_t$tic)
####################
# store results, including estimates, speed, parameter scenarios
estimates = bind_rows(estimates_lm, estimates_boot_percentile, estimates_boot_t) %>%
mutate(true_beta = current_params$beta_true,
n = current_params$n,
error_distribution = current_params$error_distribution,
time = time,
seed = seed[i],
iteration = i)
results[[i]] = estimates
print(i)
}
i=1
set.seed(seed[i])
####################
# simulate data
simdata = get_simdata(n = current_params$n,
beta_treat = current_params$beta_true,
error_distribution = current_params$error_distribution)
####################
# apply method(s)
tic()
fit = fit_lm(simdata)
time_lm = toc()
## apply nonparametric bootstrap
tic()
boot_df = map_dfr(1:nboot, do_bootstrap, simulated_data = simdata)
source(here::here("source", "02_apply_methods.R"))
## apply nonparametric bootstrap
tic()
boot_df = map_dfr(1:nboot, do_bootstrap, simulated_data = simdata)
source(here::here("source", "02_apply_methods.R"))
## apply nonparametric bootstrap
tic()
boot_df = map_dfr(1:nboot, do_bootstrap, simulated_data = simdata)
time_boot_percentile = toc()
####################
# calculate estimates
estimates_lm = get_estimates(model_fit = fit,
true_beta = current_params$beta_true)
estimates_boot_percentile = get_bootstrap_coverage(boot_df, beta_hat = estimates_lm$beta_hat,
true_beta = current_params$beta_true, method = "percentile")
estimates_boot_percentile = get_bootstrap_coverage(boot_df, beta_hat = estimates_lm$beta_hat,
true_beta = current_params$beta_true)
time = c(time_lm$toc - time_lm$tic, time_boot_percentile$toc - time_boot_percentile$tic,
time_boot_t$toc - time_boot_t$tic)
time = c(time_lm$toc - time_lm$tic, time_boot_percentile$toc - time_boot_percentile$tic)
####################
# store results, including estimates, speed, parameter scenarios
estimates = bind_rows(estimates_lm, estimates_boot_percentile, estimates_boot_t) %>%
mutate(true_beta = current_params$beta_true,
n = current_params$n,
error_distribution = current_params$error_distribution,
time = time,
seed = seed[i],
iteration = i)
####################
# store results, including estimates, speed, parameter scenarios
estimates = bind_rows(estimates_lm, estimates_boot_percentile) %>%
mutate(true_beta = current_params$beta_true,
n = current_params$n,
error_distribution = current_params$error_distribution,
time = time,
seed = seed[i],
iteration = i)
results[[i]] = estimates
print(i)
results = as.list(rep(NA, nsim))
for (i in 1:10) {
set.seed(seed[i])
####################
# simulate data
simdata = get_simdata(n = current_params$n,
beta_treat = current_params$beta_true,
error_distribution = current_params$error_distribution)
####################
# apply method(s)
tic()
fit = fit_lm(simdata)
time_lm = toc()
## apply nonparametric bootstrap
tic()
boot_df = map_dfr(1:nboot, do_bootstrap, simulated_data = simdata)
time_boot_percentile = toc()
####################
# calculate estimates
estimates_lm = get_estimates(model_fit = fit,
true_beta = current_params$beta_true)
estimates_boot_percentile = get_bootstrap_coverage(boot_df, beta_hat = estimates_lm$beta_hat,
true_beta = current_params$beta_true)
time = c(time_lm$toc - time_lm$tic, time_boot_percentile$toc - time_boot_percentile$tic)
####################
# store results, including estimates, speed, parameter scenarios
estimates = bind_rows(estimates_lm, estimates_boot_percentile) %>%
mutate(true_beta = current_params$beta_true,
n = current_params$n,
error_distribution = current_params$error_distribution,
time = time,
seed = seed[i],
iteration = i)
results[[i]] = estimates
print(i)
}
View(results)
####################
# save results
filename = paste0("scenario_", scenario, ".RDA")
save(results,
file = here::here("result", filename))
library(tidyverse)
library(ggplot2)
rda_files <- list.files(here::here("result"), pattern = "\\.RDA$", full.names = TRUE)
all_results = NA
for (i in 1:length(rda_files)) {
load(rda_files[i])
tmp = bind_rows(results)
all_results = rbind(all_results, tmp)
}
View(all_results)
475*4
all_results = na.omit(all_results)
View(all_results)
dat_bias = all_results %>% group_by(true_beta, epsilon_distribution, method) %>%
summarise(beta_hat = mean(beta_hat)) %>%
mutate(beta_bias = beta_hat - true_beta)
dat_bias = all_results %>% group_by(true_beta, error_distribution, method) %>%
summarise(beta_hat = mean(beta_hat)) %>%
mutate(beta_bias = beta_hat - true_beta)
View(dat_bias)
# bias of beta hat
# Wald and bootstrap interval only impact CI, use one of them to calculate bias
dat_bias = all_results %>% filter(method == "lm") %>% group_by(true_beta, error_distribution) %>%
summarise(beta_hat = mean(beta_hat)) %>%
mutate(beta_bias = beta_hat - true_beta)
View(dat_bias)
# bias of beta hat
# Wald and bootstrap interval only impact CI, use one of them to calculate bias
dat_bias = all_results %>% filter(method == "lm") %>% group_by(true_beta, error_distribution) %>%
summarise(beta_hat_avg = mean(beta_hat), se = sum(beta_hat - beta_hat_avg)^) %>%
# bias of beta hat
# Wald and bootstrap interval only impact CI, use one of them to calculate bias
dat_bias = all_results %>% filter(method == "lm") %>% group_by(true_beta, error_distribution) %>%
summarise(beta_hat_avg = mean(beta_hat), se = sum(beta_hat - beta_hat_avg)^2) %>%
mutate(beta_bias = beta_hat - true_beta)
dat_bias = all_results %>% filter(method == "lm") %>% group_by(true_beta, error_distribution) %>%
summarise(beta_hat_avg = mean(beta_hat), se = sum(beta_hat - beta_hat_avg)^2)
View(dat_bias)
dat_bias = all_results %>% filter(method == "lm") %>% group_by(true_beta, error_distribution) %>%
summarise(beta_hat_avg = mean(beta_hat), se = sum(beta_hat - beta_hat_avg)^2, n = n())
# bias of beta hat
# Wald and bootstrap interval only impact CI, use one of them to calculate bias
dat_bias = all_results %>% filter(method == "lm") %>% group_by(true_beta, error_distribution) %>%
summarise(beta_hat_avg = mean(beta_hat), se = sum(beta_hat - beta_hat_avg)^2, n = n()) %>%
mutate(beta_bias = beta_hat - true_beta, bias_se = sqrt(se/(n*(n-1))))
# bias of beta hat
# Wald and bootstrap interval only impact CI, use one of them to calculate bias
dat_bias = all_results %>% filter(method == "lm") %>% group_by(true_beta, error_distribution) %>%
summarise(beta_hat_avg = mean(beta_hat), se = sum(beta_hat - beta_hat_avg)^2, n = n()) %>%
mutate(beta_bias = beta_hat_avg - true_beta, bias_se = sqrt(se/(n*(n-1))))
p = ggplot(dat_bias, aes(x = error_distribution, y = beta_bias)) + geom_col() +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
p
# bias of beta hat
# Wald and bootstrap interval only impact CI, use one of them to calculate bias
dat_bias = all_results %>% filter(method == "lm") %>% group_by(true_beta, error_distribution) %>%
summarise(beta_hat_avg = mean(beta_hat), se = sum(beta_hat - beta_hat_avg)^2, n = n()) %>%
mutate(beta_bias = beta_hat_avg - true_beta, bias_se = sqrt(se/(n*(n-1))),
lower = beta_bias - 1.96*bias_se, upper = beta_bias + 1.96*bias_se)
p = ggplot(dat_bias, aes(x = error_distribution, y = beta_bias)) + geom_point(size = 3, color = "blue") +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
p
p = ggplot(dat_bias, aes(x = true_beta, y = beta_bias)) + geom_point(size = 3, color = "blue") +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
facet_grid(cols = vars(error_distribution),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
p
p = ggplot(dat_bias, aes(x = error_distribution, y = beta_bias)) + geom_point(size = 3, color = "blue") +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
png(here::here("results","figure_for_bias.png"), width = 720, height = 720)
png(here::here("result","figure_for_bias.png"), width = 720, height = 720)
p
dev.off()
View(all_results)
dat_coverage = all_results %>% group_by(true_beta, error_distribution, method) %>%
summarise(coverage = coverage_lower == 1 && coverage_upper == 1) %>%
p = ggplot(dat_coverage, aes(x = factor(n), y = coverage, fill = method)) + geom_col(position = "dodge", alpha = 0.8) +
geom_hline(yintercept = 0.95, color = 1, lty = "dashed", linewidth = 1) +
facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Sample Size (n)", y = "Coverage") +
theme(text = element_text(size = 20), legend.position = "bottom")
dat_coverage = all_results %>% group_by(true_beta, error_distribution, method) %>%
summarise(coverage = coverage_lower == 1 && coverage_upper == 1)
dat_coverage = all_results %>% mutate(coverage = ifelse(coverage_lower + coverage_upper == 2, 1, 0)) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(coverage = coverage_lower == 1 && coverage_upper == 1)
dat_coverage = all_results %>% mutate(coverage = ifelse(coverage_lower + coverage_upper == 2, 1, 0)) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(coverage = mean(coverage))
dat_coverage = all_results %>% mutate(coverage = ifelse(coverage_lower + coverage_upper == 2, 1, 0))
View(dat_coverage)
table(dat_coverage)
table(dat_coverage$coverage)
dat_coverage = all_results %>% mutate(coverage = ifelse(coverage_lower + coverage_upper == 2, 1, 0)) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(coverage = mean(coverage))
dat_coverage = all_results %>% mutate(coverage = ifelse(coverage_lower + coverage_upper == 2, 1, 0)) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(coverage = mean(coverage), n = n()) %>%
mutate(coverage_se = sqrt(coverage * (1 - coverage) / n))
dat_coverage = all_results %>% mutate(coverage = ifelse(coverage_lower + coverage_upper == 2, 1, 0)) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(coverage = mean(coverage), n = n()) %>%
mutate(coverage_se = sqrt(coverage * (1 - coverage) / n),
lower = coverage - 1.96*coverage_se, upper = coverage + 1.96*coverage_se)
p = ggplot(dat_bias, aes(x = error_distribution, y = beta_bias, color = method)) + geom_point(size = 3) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Bias of estimated beta", color = method) +
theme(text = element_text(size = 22))
p = ggplot(dat_coverage, aes(x = error_distribution, y = beta_bias, color = method)) + geom_point(size = 3) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Bias of estimated beta", color = method) +
theme(text = element_text(size = 22))
dat_coverage = all_results %>% mutate(coverage = ifelse(coverage_lower + coverage_upper == 2, 1, 0)) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(coverage = mean(coverage), n = n()) %>%
mutate(coverage_se = sqrt(coverage * (1 - coverage) / n),
lower = coverage - 1.96*coverage_se, upper = coverage + 1.96*coverage_se)
p = ggplot(dat_coverage, aes(x = error_distribution, y = coverage, color = method)) + geom_point(size = 3) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Bias of estimated beta", color = method) +
theme(text = element_text(size = 22))
p = ggplot(dat_coverage, aes(x = error_distribution, y = coverage, color = method)) + geom_point(size = 3) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x)))
p
p = ggplot(dat_coverage, aes(x = error_distribution, y = coverage, color = method)) + geom_point(size = 3) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Coverage") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
p = ggplot(dat_coverage, aes(x = error_distribution, y = coverage, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, position = position_dodge(width = 0.4)) +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Coverage") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
p = ggplot(dat_bias, aes(x = error_distribution, y = beta_bias)) + geom_point(size = 3, color = "blue") +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
geom_hline(y = 0, lty = "dashed") +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
p = ggplot(dat_bias, aes(x = error_distribution, y = beta_bias)) + geom_point(size = 3, color = "blue") +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
geom_hline(aes(y = 0), lty = "dashed") +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
?geom_hline
p = ggplot(dat_bias, aes(x = error_distribution, y = beta_bias)) + geom_point(size = 3, color = "blue") +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
geom_hline(aes(yintercept = 0), lty = "dashed") +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
p
png(here::here("result","figure_for_bias.png"), width = 720, height = 720)
p
dev.off()
p = ggplot(dat_coverage, aes(x = error_distribution, y = coverage, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, position = position_dodge(width = 0.4)) +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Coverage") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
p = ggplot(dat_coverage, aes(x = error_distribution, y = coverage, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, position = position_dodge(width = 0.4)) +
geom_hline(aes(yintercept = 0), lty = "dashed") +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Coverage") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
p = ggplot(dat_coverage, aes(x = error_distribution, y = coverage, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, position = position_dodge(width = 0.4)) +
geom_hline(aes(yintercept = 0.95), lty = "dashed") +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Coverage") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
png(here::here("result","figure_for_coverage.png"), width = 720, height = 540)
p
dev.off()
3.045/28
4103.2/27
library(tidyverse)
library(ggplot2)
rda_files <- list.files(here::here("data"), pattern = "\\.RDA$", full.names = TRUE)
all_results = NA
for (i in 1:length(rda_files)) {
load(rda_files[i])
tmp = bind_rows(results)
all_results = rbind(all_results, tmp)
}
all_results = na.omit(all_results)
# bias of beta hat
# Wald and bootstrap interval only impact CI, use one of them to calculate bias
dat_bias = all_results %>% filter(method == "lm") %>% group_by(true_beta, error_distribution) %>%
summarise(beta_hat_avg = mean(beta_hat), se = sum(beta_hat - beta_hat_avg)^2, n = n()) %>%
mutate(beta_bias = beta_hat_avg - true_beta, bias_se = sqrt(se/(n*(n-1))),
lower = beta_bias - 1.96*bias_se, upper = beta_bias + 1.96*bias_se)
p = ggplot(dat_bias, aes(x = error_distribution, y = beta_bias)) + geom_point(size = 3, color = "blue") +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
geom_hline(aes(yintercept = 0), lty = "dashed") +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Bias of estimated beta") +
theme(text = element_text(size = 22))
png(here::here("result","figure_for_bias.png"), width = 720, height = 720)
p
dev.off()
View(all_results)
dat_coverage = all_results %>% mutate(coverage = (lower <= true_beta && upper >= true_beta)) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(coverage = mean(coverage), n = n()) %>%
mutate(coverage_se = sqrt(coverage * (1 - coverage) / n),
coverage_lower = coverage - 1.96*coverage_se, coverage_upper = coverage + 1.96*coverage_se)
dat_coverage = all_results %>% mutate(coverage = (lower <= true_beta & upper >= true_beta)) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(coverage = mean(coverage), n = n()) %>%
mutate(coverage_se = sqrt(coverage * (1 - coverage) / n),
coverage_lower = coverage - 1.96*coverage_se, coverage_upper = coverage + 1.96*coverage_se)
dat_coverage = all_results %>% mutate(coverage = (lower <= true_beta & upper >= true_beta)) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(coverage = mean(coverage), n = n()) %>%
mutate(coverage_se = sqrt(coverage * (1 - coverage) / n),
coverage_lower = coverage - 1.96*coverage_se, coverage_upper = coverage + 1.96*coverage_se)
p = ggplot(dat_coverage, aes(x = error_distribution, y = coverage, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, position = position_dodge(width = 0.4)) +
geom_hline(aes(yintercept = 0.95), lty = "dashed") +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Coverage") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
p = ggplot(dat_coverage, aes(x = error_distribution, y = coverage, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = coverage_lower, ymax = coverage_upper), width = 0.2, position = position_dodge(width = 0.4)) +
geom_hline(aes(yintercept = 0.95), lty = "dashed") +
facet_grid(cols = vars(true_beta),
labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) +
labs(x = "Error distribution", y = "Coverage") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
png(here::here("result","figure_for_coverage.png"), width = 720, height = 540)
p
dev.off()
dat_power = all_results %>% filter(true_beta != 0) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(power = mean((lower > 0) | (upper < 0)))
View(dat_power)
dat_type1err <- all_results %>%
filter(true_beta == 0) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(type1_error = mean((lower > 0) | (upper < 0)))
View(dat_type1err)
dat_power = all_results %>%
filter(true_beta != 0) %>%
group_by(true_beta, error_distribution, method) %>%
summarise(power = mean((lower > 0) | (upper < 0)))
all_results$power = ifelse(all_results$lower > 0 | all_results$upper <0, 1, 0)
table(all_results$power)
table(all_results$power[all_results$true_beta != 0])
all_results$power = ifelse(all_results$lower > 0, 1, 0)
table(all_results$power[all_results$true_beta != 0])
dat_power = all_results %>%
group_by(true_beta, error_distribution, method) %>%
summarise(value = mean((lower > 0) | (upper < 0)))
dat_power$true_beta = factor(dat_power$true_beta,
levels = c(0,0.5),
labels = c("Type I error", "Power"))
p = ggplot(dat_power, aes(x = error_distribution, y = coverage, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = coverage_lower, ymax = coverage_upper), width = 0.2, position = position_dodge(width = 0.4)) +
geom_hline(aes(yintercept = 0.95), lty = "dashed") +
facet_grid(cols = vars(true_beta)) +
labs(x = "Error distribution", y = "Values") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
p = ggplot(dat_power, aes(x = error_distribution, y = values, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = coverage_lower, ymax = coverage_upper), width = 0.2, position = position_dodge(width = 0.4)) +
geom_hline(aes(yintercept = 0.95), lty = "dashed") +
facet_grid(cols = vars(true_beta)) +
labs(x = "Error distribution", y = "Values") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
p = ggplot(dat_power, aes(x = error_distribution, y = value, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = coverage_lower, ymax = coverage_upper), width = 0.2, position = position_dodge(width = 0.4)) +
geom_hline(aes(yintercept = 0.95), lty = "dashed") +
facet_grid(cols = vars(true_beta)) +
labs(x = "Error distribution", y = "Values") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
dat_power = all_results %>%
group_by(true_beta, error_distribution, method) %>%
summarise(value = mean((lower > 0) | (upper < 0)), n = n()) %>%
mutate(value_se = sqrt(value * (1 - value) / n),
value_lower = value - 1.96*value_se, value_upper = value + 1.96*value_se)
dat_power$true_beta = factor(dat_power$true_beta,
levels = c(0,0.5),
labels = c("Type I error", "Power"))
p = ggplot(dat_power, aes(x = error_distribution, y = value, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = coverage_lower, ymax = coverage_upper), width = 0.2, position = position_dodge(width = 0.4)) +
geom_hline(aes(yintercept = 0.95), lty = "dashed") +
facet_grid(cols = vars(true_beta)) +
labs(x = "Error distribution", y = "Values") +
theme(text = element_text(size = 22), legend.position = "bottom")
p = ggplot(dat_power, aes(x = error_distribution, y = value, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = value_lower, ymax = value_upper), width = 0.2, position = position_dodge(width = 0.4)) +
geom_hline(aes(yintercept = 0.95), lty = "dashed") +
facet_grid(cols = vars(true_beta)) +
labs(x = "Error distribution", y = "Values") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
p = ggplot(dat_power, aes(x = error_distribution, y = value, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.4)) +
geom_errorbar(aes(ymin = value_lower, ymax = value_upper), width = 0.2, position = position_dodge(width = 0.4)) +
geom_hline(aes(yintercept = 0.8), lty = "dashed") +
geom_hline(aes(yintercept = 0.05), lty = "dashed") +
facet_grid(cols = vars(true_beta)) +
labs(x = "Error distribution", y = "Values") +
theme(text = element_text(size = 22), legend.position = "bottom")
p
png(here::here("result","figure_for_power.png"), width = 720, height = 540)
p
dev.off()
# computation time
dat_time = all_results %>% group_by(method)
# computation time
dat_time = all_results %>% group_by(method) %>%
summarise(time = mean(time))
View(dat_time)
# computation time
dat_time = all_results %>% group_by(true_beta, error_distribution, method) %>%
summarise(time = mean(time))
# computation time
dat_time = all_results %>% group_by(method) %>%
summarise(time = mean(time))
write.csv(here::here("result","time.csv"), row.names = F)
write.csv(dat_time, here::here("result","time.csv"), row.names = F)
