library(tidyverse)
library(broom)
library(tictoc)



###############################################################
## define or source functions used in code below
###############################################################

source(here::here("source", "01_simulate_data.R"))
source(here::here("source", "02_apply_methods.R"))
source(here::here("source", "03_extract_estimates.R"))


###############################################################
## set simulation design elements
###############################################################

# use same nsim in HW1
nsim = 475 
# number of bootstrap samples
nboot = 500 

n = 20
beta_true = c(0, 0.5)
error_distribution = c("Normal", "Gamma")

params = expand.grid(n = n,
                     beta_true = beta_true,
                     error_distribution = error_distribution,
                     stringsAsFactors = F)

###############################################################
## start simulation code
###############################################################


# generate a random seed for each simulated dataset- each parameter scenario will then reuse same seed
seed = floor(runif(nsim, 1, 10000))

# read in scenario number from sbatch
args = commandArgs(trailingOnly=TRUE)
scenario = as.numeric(args[1])

  
print(paste0("current scenario: ", scenario))
current_params = params[scenario,]

results = as.list(rep(NA, nsim))

for (i in 1:nsim) {
  
  set.seed(seed[i])
  
  ####################
  # simulate data
  simdata = get_simdata(n = current_params$n,
                        beta_treat = current_params$beta_true,
                        error_distribution = current_params$error_distribution)
  
  ####################
  # apply method(s)
  tic()
  fit = fit_lm(simdata)
  time_lm = toc()
  
  ## apply nonparametric bootstrap
  tic()
  boot_df = map_dfr(1:nboot, do_bootstrap, simulated_data = simdata)
  time_boot_percentile = toc()
  
  
  ####################
  # calculate estimates
  estimates_lm = get_estimates(model_fit = fit,
                               true_beta = current_params$beta_true)
  
  estimates_boot_percentile = get_bootstrap_coverage(boot_df, beta_hat = estimates_lm$beta_hat,
                                                     true_beta = current_params$beta_true)
  
  time = c(time_lm$toc - time_lm$tic, time_boot_percentile$toc - time_boot_percentile$tic)
  
  ####################
  # store results, including estimates, speed, parameter scenarios
  estimates = bind_rows(estimates_lm, estimates_boot_percentile) %>%
    mutate(true_beta = current_params$beta_true,
           n = current_params$n,
           error_distribution = current_params$error_distribution,
           time = time,
           seed = seed[i],
           iteration = i)
  
  results[[i]] = estimates

}  


####################
# save results
filename = paste0("scenario_", scenario, ".RDA")
save(results,
     file = here::here("result", filename))



  
  