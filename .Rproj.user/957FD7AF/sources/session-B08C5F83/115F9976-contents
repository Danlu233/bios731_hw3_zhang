library(tidyverse)
library(ggplot2)

# read in all simulation results

rda_files <- list.files(here::here("result"), pattern = "\\.RDA$", full.names = TRUE)

all_results = NA
for (i in 1:length(rda_files)) {
  load(rda_files[i])
  tmp = bind_rows(results)
  all_results = rbind(all_results, tmp)
}

all_results = na.omit(all_results)


# bias of beta hat
# Wald and bootstrap interval only impact CI, use one of them to calculate bias
dat_bias = all_results %>% filter(method == "lm") %>% group_by(true_beta, error_distribution) %>%
  summarise(beta_hat_avg = mean(beta_hat), se = sum(beta_hat - beta_hat_avg)^2, n = n()) %>%
  mutate(beta_bias = beta_hat_avg - true_beta, bias_se = sqrt(se/(n*(n-1))),
         lower = beta_bias - 1.96*bias_se, upper = beta_bias + 1.96*bias_se)

p = ggplot(dat_bias, aes(x = error_distribution, y = beta_bias)) + geom_point(size = 3, color = "blue") +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
  geom_hline(aes(yintercept = 0), lty = "dashed") + 
  facet_grid(cols = vars(true_beta),
             labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) + 
  labs(x = "Error distribution", y = "Bias of estimated beta") + 
  theme(text = element_text(size = 22))

png(here::here("result","figure_for_bias.png"), width = 720, height = 720)
p
dev.off()


# coverage of beta hat

dat_coverage = all_results %>% mutate(coverage = ifelse(coverage_lower + coverage_upper == 2, 1, 0)) %>% 
  group_by(true_beta, error_distribution, method) %>%
  summarise(coverage = mean(coverage), n = n()) %>% 
  mutate(coverage_se = sqrt(coverage * (1 - coverage) / n), 
         lower = coverage - 1.96*coverage_se, upper = coverage + 1.96*coverage_se)

p = ggplot(dat_coverage, aes(x = error_distribution, y = coverage, color = method)) + 
  geom_point(size = 3, position = position_dodge(width = 0.4)) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, position = position_dodge(width = 0.4)) +
  geom_hline(aes(yintercept = 0.95), lty = "dashed") +
  facet_grid(cols = vars(true_beta),
             labeller = labeller(true_beta = function(x) paste0("True beta = ", x))) + 
  labs(x = "Error distribution", y = "Coverage") + 
  theme(text = element_text(size = 22), legend.position = "bottom")

png(here::here("result","figure_for_coverage.png"), width = 720, height = 540)
p
dev.off()

# Power

dat_power = 




# computation time
dat_time_w = all_results %>% 
  summarise(time = mean(time_wald)) %>% 
  mutate(method = "Wald confidence intervals")

dat_time_p = all_results %>% 
  summarise(time = mean(time_p)) %>% mutate(method = "bootstrap percentile intervals")

dat_time_t = all_results %>% 
  summarise(time = mean(time_t)) %>% mutate(method = "bootstrap t intervals")

dat_time = rbind(dat_time_w, dat_time_p, dat_time_t)

write.csv(dat_time, here::here("results","computation_time.csv"), row.names = F)

# distribution of se
p = ggplot(all_results, aes(x = std.error, color = factor(n))) + 
  geom_density(linewidth = 1) + 
  facet_grid(rows = vars(epsilon_dist), cols = vars(true_beta),
             labeller = labeller(true_beta = function(x) paste0("True beta = ", x)),
             scales = "free_y") +
  labs(x = "Standard Error", y = "Density", color = "Sample Size (n)") + 
  theme(text = element_text(size = 20), legend.position = "bottom")

png(here::here("results","figure_for_se.png"), width = 720, height = 540)
p
dev.off()